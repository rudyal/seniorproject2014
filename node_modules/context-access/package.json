{
  "name": "context-access",
  "description": "Powerful access control with a dead simple API.",
  "keywords": [
    "acl",
    "permissions",
    "access control",
    "permission",
    "access"
  ],
  "author": {
    "name": "Bloodhound",
    "email": "alex@bloodhound.com"
  },
  "homepage": "https://github.com/bloodhound/context-access",
  "version": "1.1.0",
  "contributors": [
    {
      "name": "Alex Mingoia",
      "email": "alex@bloodhound.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/bloodhound/context-access.git"
  },
  "devDependencies": {
    "mocha": "1.12.1",
    "should": "1.2.2"
  },
  "scripts": {
    "test": "NODE_ENV=test node_modules/mocha/bin/mocha --bail --reporter spec test"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "license": "MIT",
  "readme": "# context-access\n\n[![Build Status](https://secure.travis-ci.org/bloodhound/context-access.png)](http://travis-ci.org/bloodhound/context-access) \n[![Dependency Status](https://david-dm.org/bloodhound/context-access.png)](http://david-dm.org/bloodhound/context-access)\n\nPowerful access control with a dead simple API. Build any access control scheme\nyou need by allowing maps of arbitrary keys and values called contexts.\n\n* Simple — just two API methods.\n* Powerful — flexible enough to build any API scheme.\n* Browser support — works on the client or server.\n\n## Installation\n\n### Node\n\nUsing [npm](https://npmjs.org/):\n\n```sh\nnpm install context-access\n```\n\n### Browser\n\nUsing [component](https://github.com/component/component/):\n\n```sh\ncomponent install bloodhound/context-access\n```\n\n## Example\n\nThe simplest example is a traditional roles-based access control system:\n\n```javascript\nvar access = require('context-access');\n\naccess.allow({\n  url: '/public',\n  role: 'guest'\n});\n\naccess.assert({\n  url: '/public'\n});\n// => false\n```\n\nThe call to assert returns `false` because the properties in the context\nasserted do not match any allowed context. However, if we add a matching `role`\nproperty:\n\n```javascript\naccess.allow({\n  url: '/public',\n  role: 'guest'\n});\n\naccess.assert({\n  url: '/public',\n  role: 'guest'\n});\n// => true\n```\n\n### AND and OR operations\n\nYou can imbricate arrays to alternate AND and OR operations when asserting:\n\n```javascript\n[\"role1\", \"role1\"]                role1 AND role2\n[[\"role1\", \"role2\"]]              role1 OR role2\n[\"role1\", [\"role2\", \"role3\"]]     role1 AND (role2 OR role3)\n\naccess.allow({\n  url: '/private',\n  roles: [['manager', 'admin']]\n});\n\naccess.assert({\n  roles: 'manager'\n});\n// => true\n```\n\n### Express middleware\n\nUse contexts to match routes in Express:\n\n```javascript\nvar app = require('express')();\nvar access = require('context-access');\n\n// Allow users with manager or admin role to POST to /users\naccess.allow({\n  path: '/users',\n  method: [['GET', 'POST']]\n  role: [['manager', 'admin']],\n});\n\n// Route middleware\nvar authorize = function(req, res, next) {\n  var context = {\n    role: req.session.role,   // admin\n    path: req.path,           // /users\n    method: req.method        // POST\n  };\n  if (access.assert(context)) {\n    return next();\n  }\n  else {\n    res.send(403, 'You must be an admin to do this!');\n  }\n};\n\n// Use route middleware\napp.post('/users', authorize, function(req, res) {\n  // ...\n});\n```\n\n## API\n\n### exports.allow(context)\n\nAllow a given context when asserted.\n\n### exports.assert(context)\n\nAssert a given context. Returns `true` or `false` if it is allowed or denied.\n\nIf there's no definition for a key in the given context, then it is ignored.\n\n## Browser support\n\nFirefox, Chrome, Safari, IE9+\n\n## Tests\n\nTests are written with [mocha](https://github.com/visionmedia/mocha) and\n[should](https://github.com/visionmedia/should.js) using BDD-style assertions.\n\nRun them with npm:\n\n```sh\nnpm test\n```\n\n## MIT Licensed\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bloodhound/context-access/issues"
  },
  "_id": "context-access@1.1.0",
  "dist": {
    "shasum": "2766e0ba9c32ab614cab217312cc318c572db7dc",
    "tarball": "http://registry.npmjs.org/context-access/-/context-access-1.1.0.tgz"
  },
  "_from": "context-access@1.1.0",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "amingoia",
    "email": "talk@alexmingoia.com"
  },
  "maintainers": [
    {
      "name": "amingoia",
      "email": "talk@alexmingoia.com"
    }
  ],
  "directories": {},
  "_shasum": "2766e0ba9c32ab614cab217312cc318c572db7dc",
  "_resolved": "https://registry.npmjs.org/context-access/-/context-access-1.1.0.tgz"
}
